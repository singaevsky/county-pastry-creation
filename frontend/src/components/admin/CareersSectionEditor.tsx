import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Plus, Edit, Trash2, Save, X, Eye } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface Benefit {
  id: number;
  title: string;
  description: string;
  icon: string;
  isActive: boolean;
}

interface CareersSectionData {
  heroTitle: string;
  heroDescription: string;
  benefits: Benefit[];
  contactTitle: string;
  contactDescription: string;
  contactButtonText: string;
  contactButtonLink: string;
}

const CareersSectionEditor: React.FC = () => {
  const [sectionData, setSectionData] = useState<CareersSectionData>({
    heroTitle: "–í–∞–∫–∞–Ω—Å–∏–∏",
    heroDescription: "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤! –ú—ã –∏—â–µ–º —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã—Ö –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑–¥–µ–ª—è—é—Ç –Ω–∞—à—É –ª—é–±–æ–≤—å –∫ –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–æ–º—É –∏—Å–∫—É—Å—Å—Ç–≤—É.",
    benefits: [
      {
        id: 1,
        title: "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞",
        description: "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ—Å—Ç–æ–π–Ω—É—é –æ–ø–ª–∞—Ç—É —Ç—Ä—É–¥–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–æ—Å—Ç–∞",
        icon: "üí∞",
        isActive: true
      },
      {
        id: 2,
        title: "–û–±—É—á–µ–Ω–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ",
        description: "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∫–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç",
        icon: "üìö",
        isActive: true
      },
      {
        id: 3,
        title: "–î—Ä—É–∂–Ω—ã–π –∫–æ–ª–ª–µ–∫—Ç–∏–≤",
        description: "–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤",
        icon: "üë•",
        isActive: true
      }
    ],
    contactTitle: "–ù–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –≤–∞–∫–∞–Ω—Å–∏—é?",
    contactDescription: "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º —Å–≤–æ–µ —Ä–µ–∑—é–º–µ, –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π!",
    contactButtonText: "–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏",
    contactButtonLink: "/contact"
  });

  const [isEditingBenefit, setIsEditingBenefit] = useState<Benefit | null>(null);
  const [isBenefitDialogOpen, setIsBenefitDialogOpen] = useState(false);
  const [benefitForm, setBenefitForm] = useState({
    title: '',
    description: '',
    icon: ''
  });
  const { toast } = useToast();

  const handleSaveSection = async () => {
    try {
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å API –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      // await fetch('/api/careers-section', { method: 'PUT', body: JSON.stringify(sectionData) });
      
      toast({
        title: "–£—Å–ø–µ—à–Ω–æ",
        description: "–†–∞–∑–¥–µ–ª –≤–∞–∫–∞–Ω—Å–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω"
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è",
        variant: "destructive"
      });
    }
  };

  const handleAddBenefit = () => {
    setIsEditingBenefit(null);
    setBenefitForm({ title: '', description: '', icon: '' });
    setIsBenefitDialogOpen(true);
  };

  const handleEditBenefit = (benefit: Benefit) => {
    setIsEditingBenefit(benefit);
    setBenefitForm({
      title: benefit.title,
      description: benefit.description,
      icon: benefit.icon
    });
    setIsBenefitDialogOpen(true);
  };

  const handleSaveBenefit = () => {
    if (isEditingBenefit) {
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
      setSectionData(prev => ({
        ...prev,
        benefits: prev.benefits.map(b => 
          b.id === isEditingBenefit.id 
            ? { ...b, ...benefitForm }
            : b
        )
      }));
    } else {
      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
      const newBenefit: Benefit = {
        id: Date.now(),
        ...benefitForm,
        isActive: true
      };
      setSectionData(prev => ({
        ...prev,
        benefits: [...prev.benefits, newBenefit]
      }));
    }
    
    setIsBenefitDialogOpen(false);
    toast({
      title: "–£—Å–ø–µ—à–Ω–æ",
      description: "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ"
    });
  };

  const handleDeleteBenefit = (id: number) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ?')) {
      setSectionData(prev => ({
        ...prev,
        benefits: prev.benefits.filter(b => b.id !== id)
      }));
      toast({
        title: "–£—Å–ø–µ—à–Ω–æ",
        description: "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–æ"
      });
    }
  };

  const handleToggleBenefit = (id: number) => {
    setSectionData(prev => ({
      ...prev,
      benefits: prev.benefits.map(b => 
        b.id === id ? { ...b, isActive: !b.isActive } : b
      )
    }));
  };

  return (
    <div className="space-y-6">
      {/* –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Hero —Å–µ–∫—Ü–∏–∏ */}
      <Card>
        <CardHeader>
          <CardTitle>Hero —Å–µ–∫—Ü–∏—è</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <Label htmlFor="heroTitle">–ó–∞–≥–æ–ª–æ–≤–æ–∫</Label>
            <Input
              id="heroTitle"
              value={sectionData.heroTitle}
              onChange={(e) => setSectionData(prev => ({ ...prev, heroTitle: e.target.value }))}
              placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏"
            />
          </div>
          <div>
            <Label htmlFor="heroDescription">–û–ø–∏—Å–∞–Ω–∏–µ</Label>
            <Textarea
              id="heroDescription"
              value={sectionData.heroDescription}
              onChange={(e) => setSectionData(prev => ({ ...prev, heroDescription: e.target.value }))}
              placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏"
              rows={3}
            />
          </div>
        </CardContent>
      </Card>

      {/* –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ */}
      <Card>
        <CardHeader>
          <div className="flex justify-between items-center">
            <CardTitle>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã</CardTitle>
            <Button onClick={handleAddBenefit}>
              <Plus className="w-4 h-4 mr-2" />
              –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ
            </Button>
          </div>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {sectionData.benefits.map((benefit) => (
              <Card key={benefit.id} className="border-l-4 border-l-primary">
                <CardContent className="p-4">
                  <div className="flex justify-between items-start">
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-2">
                        <span className="text-2xl">{benefit.icon}</span>
                        <h3 className="text-lg font-semibold">{benefit.title}</h3>
                        <Badge variant={benefit.isActive ? "default" : "secondary"}>
                          {benefit.isActive ? "–ê–∫—Ç–∏–≤–Ω–æ" : "–ù–µ–∞–∫—Ç–∏–≤–Ω–æ"}
                        </Badge>
                      </div>
                      <p className="text-sm text-muted-foreground">{benefit.description}</p>
                    </div>
                    <div className="flex gap-2 ml-4">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleEditBenefit(benefit)}
                      >
                        <Edit className="w-4 h-4" />
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleToggleBenefit(benefit.id)}
                      >
                        <Eye className="w-4 h-4" />
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleDeleteBenefit(benefit.id)}
                        className="text-destructive hover:text-destructive"
                      >
                        <Trash2 className="w-4 h-4" />
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π —Å–µ–∫—Ü–∏–∏ */}
      <Card>
        <CardHeader>
          <CardTitle>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è —Å–µ–∫—Ü–∏—è</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <Label htmlFor="contactTitle">–ó–∞–≥–æ–ª–æ–≤–æ–∫</Label>
            <Input
              id="contactTitle"
              value={sectionData.contactTitle}
              onChange={(e) => setSectionData(prev => ({ ...prev, contactTitle: e.target.value }))}
              placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π —Å–µ–∫—Ü–∏–∏"
            />
          </div>
          <div>
            <Label htmlFor="contactDescription">–û–ø–∏—Å–∞–Ω–∏–µ</Label>
            <Textarea
              id="contactDescription"
              value={sectionData.contactDescription}
              onChange={(e) => setSectionData(prev => ({ ...prev, contactDescription: e.target.value }))}
              placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π —Å–µ–∫—Ü–∏–∏"
              rows={3}
            />
          </div>
          <div className="grid grid-cols-2 gap-4">
            <div>
              <Label htmlFor="contactButtonText">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏</Label>
              <Input
                id="contactButtonText"
                value={sectionData.contactButtonText}
                onChange={(e) => setSectionData(prev => ({ ...prev, contactButtonText: e.target.value }))}
                placeholder="–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏"
              />
            </div>
            <div>
              <Label htmlFor="contactButtonLink">–°—Å—ã–ª–∫–∞ –∫–Ω–æ–ø–∫–∏</Label>
              <Input
                id="contactButtonLink"
                value={sectionData.contactButtonLink}
                onChange={(e) => setSectionData(prev => ({ ...prev, contactButtonLink: e.target.value }))}
                placeholder="/contact"
              />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
      <div className="flex justify-end">
        <Button onClick={handleSaveSection} size="lg">
          <Save className="w-4 h-4 mr-2" />
          –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        </Button>
      </div>

      {/* –î–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ */}
      <Dialog open={isBenefitDialogOpen} onOpenChange={setIsBenefitDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>
              {isEditingBenefit ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ' : '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ'}
            </DialogTitle>
          </DialogHeader>
          
          <div className="space-y-4">
            <div>
              <Label htmlFor="benefitTitle">–ù–∞–∑–≤–∞–Ω–∏–µ</Label>
              <Input
                id="benefitTitle"
                value={benefitForm.title}
                onChange={(e) => setBenefitForm(prev => ({ ...prev, title: e.target.value }))}
                placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞"
              />
            </div>
            <div>
              <Label htmlFor="benefitDescription">–û–ø–∏—Å–∞–Ω–∏–µ</Label>
              <Textarea
                id="benefitDescription"
                value={benefitForm.description}
                onChange={(e) => setBenefitForm(prev => ({ ...prev, description: e.target.value }))}
                placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞"
                rows={3}
              />
            </div>
            <div>
              <Label htmlFor="benefitIcon">–ò–∫–æ–Ω–∫–∞ (—ç–º–æ–¥–∑–∏)</Label>
              <Input
                id="benefitIcon"
                value={benefitForm.icon}
                onChange={(e) => setBenefitForm(prev => ({ ...prev, icon: e.target.value }))}
                placeholder="üí∞"
              />
            </div>
          </div>

          <div className="flex justify-end gap-2 pt-4">
            <Button variant="outline" onClick={() => setIsBenefitDialogOpen(false)}>
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button onClick={handleSaveBenefit}>
              <Save className="w-4 h-4 mr-2" />
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default CareersSectionEditor;
